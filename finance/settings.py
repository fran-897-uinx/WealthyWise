"""
Django settings for finance project.
Generated by 'django-admin startproject' using Django 5.2.4.
"""

import os
import sys
import logging
import dj_database_url
from pathlib import Path
from django.utils.translation import gettext_lazy as _
from django.contrib.messages import constants as messages
from dotenv import load_dotenv
from urllib.parse import urlparse

# ==========================
# Base & Environment
# ==========================
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(BASE_DIR / ".env")

SECRET_KEY = os.environ.get(
    "SECRET_KEY", "django-insecure-fallback-key-for-development-only"
)
DEBUG = os.environ.get("DEBUG", "True").lower() == "true"

# ==========================
# Hosts & CSRF
# ==========================
ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", "localhost,127.0.0.1").split(",")
ADMIN_URL = os.environ.get("ADMIN_URL", "admin/")

RENDER_EXTERNAL_HOSTNAME = os.environ.get("RENDER_EXTERNAL_HOSTNAME")
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

if os.environ.get("DOMAIN"):
    ALLOWED_HOSTS.append(os.environ.get("DOMAIN"))

# CSRF trusted origins
CSRF_TRUSTED_ORIGINS = os.environ.get(
    "CSRF_TRUSTED_ORIGINS", "http://localhost,http://127.0.0.1"
).split(",")
if RENDER_EXTERNAL_HOSTNAME:
    CSRF_TRUSTED_ORIGINS.append(f"https://{RENDER_EXTERNAL_HOSTNAME}")
if os.environ.get("DOMAIN"):
    CSRF_TRUSTED_ORIGINS.append(f"https://{os.environ.get('DOMAIN')}")

# ==========================
# Apps
# ==========================
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.humanize",
    "django.contrib.sites",
    # Third-party
    "widget_tweaks",
    "slippers",
    "corsheaders",
    "crispy_forms",
    "crispy_bootstrap5",
    "bootstrap5",
    "whitenoise.runserver_nostatic",
    # 2FA / OTP
    "django_otp",
    "django_otp.plugins.otp_totp",
    "django_otp.plugins.otp_static",
    "django_otp.plugins.otp_email",
    "two_factor",
    "two_factor.plugins.phonenumber",
    "two_factor.plugins.email",
    "two_factor.plugins.yubikey",
    "otp_yubikey",
    "two_factor.plugins.webauthn",
    # Local apps
    "financeapp",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django_otp.middleware.OTPMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.locale.LocaleMiddleware",
]

ROOT_URLCONF = "finance.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.media",
                "django.template.context_processors.static",
                "financeapp.context_processors.app_settings",
                "financeapp.context_processors.user_settings",
            ],
        },
    },
]

WSGI_APPLICATION = "finance.wsgi.application"

# ==========================
# Database
# ==========================
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("DB_NAME"),
        "USER": os.environ.get("DB_USER"),
        "PASSWORD": os.environ.get("DB_PASSWORD"),
        "HOST": os.environ.get("DB_HOST"),
        "PORT": os.environ.get("DB_PORT", "5432"),
    }
}
if os.environ.get("DATABASE_URL"):
    DATABASES["default"] = dj_database_url.config(
        default=os.environ["DATABASE_URL"], conn_max_age=600, ssl_require=True
    )

# ==========================
# Password validation
# ==========================
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {"min_length": 8},
    },
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# ==========================
# I18N
# ==========================
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

LANGUAGES = [
    ("en", _("English")),
    ("fr", _("French")),
    ("es", _("Spanish")),
    ("ja", _("Japanese")),
]
LOCALE_PATHS = [BASE_DIR / "locale"]

# ==========================
# Static & Media
# ==========================
STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = [BASE_DIR / "static"]

STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage"
    },
}
WHITENOISE_MANIFEST_STRICT = False
WHITENOISE_MAX_AGE = 31536000

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# ==========================
# Email
# ==========================
# Gmail SMTP Email Settings
# ==========================
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False  # Gmail works best with TLS
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")  # your Gmail address
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")  # your App Password
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
CONTACT_EMAIL = EMAIL_HOST_USER

# ==========================
# Fix SSL Cert Errors (Windows/Python)
# ==========================
import ssl, smtplib, certifi

ssl_context = ssl.create_default_context(cafile=certifi.where())
smtplib.SMTP.ssl_context = ssl_context
smtplib.SMTP_SSL.ssl_context = ssl_context

# ==========================
# Auth
# ==========================
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
]

SITE_ID = 1

LOGIN_URL = "login"  # use url name, not path
LOGIN_REDIRECT_URL = "landing"
LOGOUT_REDIRECT_URL = "login"

# ==========================
# WebAuthn (Passkeys, Security Keys)
# ==========================
TWO_FACTOR_WEBAUTHN_RP_NAME = os.environ.get(
    "TWO_FACTOR_WEBAUTHN_RP_NAME", "WealthyWise"
)
TWO_FACTOR_WEBAUTHN_RP_ID = os.environ.get("TWO_FACTOR_WEBAUTHN_RP_ID", None)
TWO_FACTOR_WEBAUTHN_ORIGIN = os.environ.get("TWO_FACTOR_WEBAUTHN_ORIGIN", None)


# ==========================
# Cache / Redis / Celery
# ==========================
CACHES = {"default": {"BACKEND": "django.core.cache.backends.dummy.DummyCache"}}
REDIS_URL = os.environ.get("REDIS_URL")
if REDIS_URL:
    use_ssl = "redns.redis-cloud.com" in REDIS_URL
    CACHES["default"] = {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_URL,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "PASSWORD": urlparse(REDIS_URL).password or None,
            "SSL": use_ssl,
            "SSL_CERT_REQS": None,
            "SOCKET_CONNECT_TIMEOUT": 5,
            "SOCKET_TIMEOUT": 5,
            "COMPRESSOR": "django_redis.compressors.zlib.ZlibCompressor",
            "IGNORE_EXCEPTIONS": True,
        },
        "KEY_PREFIX": "financeapp",
    }
    CELERY_BROKER_URL = os.environ.get("CELERY_BROKER_URL", "memory://")
    CELERY_RESULT_BACKEND = os.environ.get("CELERY_RESULT_BACKEND", "cache+memory://")
else:
    CELERY_BROKER_URL = "memory://"
    CELERY_RESULT_BACKEND = "cache+memory://"

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

if "migrate" in sys.argv or "makemigrations" in sys.argv:
    CACHES["default"] = {"BACKEND": "django.core.cache.backends.dummy.DummyCache"}
    SESSION_ENGINE = "django.contrib.sessions.backends.db"

if "test" in sys.argv:
    DATABASES["default"] = {"ENGINE": "django.db.backends.sqlite3", "NAME": ":memory:"}
    PASSWORD_HASHERS = ["django.contrib.auth.hashers.MD5PasswordHasher"]
    CACHES["default"] = {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "test-cache",
    }
    SESSION_ENGINE = "django.contrib.sessions.backends.db"
    CELERY_BROKER_URL = "memory://"
    CELERY_RESULT_BACKEND = "cache+memory://"

# ==========================
# Security (Production only)
# ==========================
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    CSRF_COOKIE_HTTPONLY = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = "DENY"
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

# ==========================
# Logging
# ==========================
LOG_DIR = BASE_DIR / "logs"
LOG_DIR.mkdir(exist_ok=True)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {"format": "{levelname} {message}", "style": "{"},
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "simple" if DEBUG else "verbose",
        },
    },
    "root": {"handlers": ["console"], "level": "INFO" if DEBUG else "WARNING"},
}

# ==========================
# Messages
# ==========================
MESSAGE_TAGS = {
    messages.DEBUG: "alert-secondary",
    messages.INFO: "alert-info",
    messages.SUCCESS: "alert-success",
    messages.WARNING: "alert-warning",
    messages.ERROR: "alert-danger",
}

# ==========================
# App defaults
# ==========================
APP_SETTINGS = {
    "site_name": "WealthyWise",
    "currency": "NGN",
    "default_theme": "dark",
    "enable_notifications": True,
    "enable_auto_categorize": True,
    "enable_two_factor": False,
    "enable_email_alerts": True,
}

# ==========================
# Sentry (Production only)
# ==========================
if not DEBUG and os.environ.get("SENTRY_DSN"):
    try:
        import sentry_sdk
        from sentry_sdk.integrations.django import DjangoIntegration
        from sentry_sdk.integrations.redis import RedisIntegration

        sentry_sdk.init(
            dsn=os.environ.get("SENTRY_DSN"),
            integrations=[DjangoIntegration(), RedisIntegration()],
            traces_sample_rate=0.1,
            send_default_pii=False,
            environment="production" if os.environ.get("RENDER") else "development",
        )
    except ImportError:
        pass
