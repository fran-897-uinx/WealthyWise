"""
Django settings for finance project.
Generated by 'django-admin startproject' using Django 5.2.4.
"""

import os
import sys
import logging
import dj_database_url
from pathlib import Path
from django.utils.translation import gettext_lazy as _
from django.contrib.messages import constants as messages
import phonenumbers

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables
from dotenv import load_dotenv

load_dotenv(BASE_DIR / ".env")

# Security settings
SECRET_KEY = os.environ.get(
    "SECRET_KEY", "django-insecure-fallback-key-for-development-only"
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", "True").lower() == "true"

# Allowed hosts
ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", "localhost,127.0.0.1").split(",")

# Custom admin URL for security
ADMIN_URL = os.environ.get("ADMIN_URL", "admin/")

# Render-specific settings
RENDER_EXTERNAL_HOSTNAME = os.environ.get("RENDER_EXTERNAL_HOSTNAME")
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

# Add your domain(s) here
if os.environ.get("DOMAIN"):
    ALLOWED_HOSTS.append(os.environ.get("DOMAIN"))

    CORS_ALLOWED_ORIGINS = [
        "http://localhost:3000",
        "http://127.0.0.1:3000",
        # Add other origins as needed
    ]

# CSRF trusted origins
CSRF_TRUSTED_ORIGINS = os.environ.get(
    "CSRF_TRUSTED_ORIGINS", "http://localhost,http://127.0.0.1"
).split(",")
if RENDER_EXTERNAL_HOSTNAME:
    CSRF_TRUSTED_ORIGINS.append(f"https://{RENDER_EXTERNAL_HOSTNAME}")
if os.environ.get("DOMAIN"):
    CSRF_TRUSTED_ORIGINS.append(f"https://{os.environ.get('DOMAIN')}")

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.humanize",
    "django.contrib.sites",
    "widget_tweaks",
    "slippers",
    "corsheaders",
    "crispy_forms",
    "crispy_bootstrap5",
    "bootstrap5",
    "whitenoise.runserver_nostatic",
    "financeapp",
    "django_otp",
    "django_otp.plugins.otp_totp",  # Time-based OTP
    "django_otp.plugins.otp_static",  # Static backup codes
    "django_otp.plugins.otp_email",  # <- if you want email capability.
    "two_factor",
    "two_factor.plugins.phonenumber",  # <- if you want phone number capability.
    "two_factor.plugins.email",  # <- if you want email capability.
    "two_factor.plugins.yubikey",
    "otp_yubikey",
    "two_factor.plugins.webauthn",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django_otp.middleware.OTPMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.locale.LocaleMiddleware",
]

ROOT_URLCONF = "finance.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.media",
                "django.template.context_processors.static",
                "financeapp.context_processors.app_settings",
                "financeapp.context_processors.user_settings",
            ],
        },
    },
]

WSGI_APPLICATION = "finance.wsgi.application"

# Database configuration
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("DB_NAME"),
        "USER": os.environ.get("DB_USER"),
        "PASSWORD": os.environ.get("DB_PASSWORD"),
        "HOST": os.environ.get("DB_HOST"),
        "PORT": os.environ.get("DB_PORT", "5432"),
    }
}

if os.environ.get("DATABASE_URL"):
    import dj_database_url

    DATABASES["default"] = dj_database_url.config(
        default=os.environ["DATABASE_URL"], conn_max_age=600, ssl_require=True
    )

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            "min_length": 8,
        },
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_L10N = True
USE_TZ = True

LANGUAGES = [
    ("en", _("English")),
    ("fr", _("French")),
    ("es", _("Spanish")),
    ("ja", _("Japanese")),
]

LOCALE_PATHS = [
    BASE_DIR / "locale",
]


PHONENUMBERS_DEFAULT_REGION = "NG"

# settings.py
STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# Allow WhiteNoise to not fail if a static file is missing in manifest
WHITENOISE_MANIFEST_STRICT = False

WHITENOISE_IGNORE_PATTERNS = [
    # Add any other patterns for files that shouldn't be served
    r".*/\.",  # Hidden files
    r".*\.map",  # Source maps
]

# Media files
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Default primary key field type
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Email configuration
EMAIL_BACKEND = os.getenv(
    "EMAIL_BACKEND", "django.core.mail.backends.console.EmailBackend"
)
EMAIL_HOST = os.getenv("EMAIL_HOST", "smtp.gmail.com")
EMAIL_PORT = int(os.getenv("EMAIL_PORT", 587))
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS", "True") == "True"
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL", EMAIL_HOST_USER)
CONTACT_EMAIL = os.getenv("CONTACT_EMAIL", EMAIL_HOST_USER)


CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "two_factor.backends.TwoFactorAuthBackend",
]


SITE_ID = 1

TWO_FACTOR_PATCH_ADMIN = False  # Do not patch admin for 2FA
TWO_FACTOR_REMOVE_SUCCESS_URL = "two_factor:profile"
# Add to your settings.py
TWO_FACTOR_WEBAUTHN_RP_NAME = "wealthywise"
TWO_FACTOR_WEBAUTHN_RP_ID = None
TWO_FACTOR_WEBAUTHN_ORIGIN = None

# Limit email addresses per account
SECURE_REFERRER_POLICY = "strict-origin-when-cross-origin"
CSRF_COOKIE_HTTPONLY = True
SESSION_COOKIE_HTTPONLY = True

# Security settings for production
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    CSRF_COOKIE_HTTPONLY = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = "DENY"
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_REFERRER_POLICY = "strict-origin-when-cross-origin"

# Logging configuration
LOG_DIR = BASE_DIR / "logs"
LOG_DIR.mkdir(exist_ok=True)

if DEBUG:
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": {
            "simple": {
                "format": "{levelname} {message}",
                "style": "{",
            },
        },
        "handlers": {
            "console": {
                "level": "INFO",
                "class": "logging.StreamHandler",
                "formatter": "simple",
            },
        },
        "root": {
            "handlers": ["console"],
            "level": "INFO",
        },
    }
else:
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": {
            "verbose": {
                "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
                "style": "{",
            },
        },
        "handlers": {
            "console": {
                "level": "INFO",
                "class": "logging.StreamHandler",
                "formatter": "verbose",
            },
        },
        "root": {
            "handlers": ["console"],
            "level": "WARNING",
        },
    }

# settings.py
# Cache settings - MOVE THIS HIGHER in your settings, before test/Sentry sections
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.dummy.DummyCache",
    }
}

import ssl
from urllib.parse import urlparse

# Get the Redis URL from the environment
REDIS_URL = os.environ.get("REDIS_URL")


if REDIS_URL:
    # Override default cache to use Redis
    use_ssl = "redns.redis-cloud.com" in REDIS_URL

    CACHES["default"] = {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_URL,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "PASSWORD": urlparse(REDIS_URL).password or None,
            "SSL": use_ssl,
            "SSL_CERT_REQS": None,  # Disable SSL certificate verification
            "SOCKET_CONNECT_TIMEOUT": 5,
            "SOCKET_TIMEOUT": 5,
            "COMPRESSOR": "django_redis.compressors.zlib.ZlibCompressor",
            "IGNORE_EXCEPTIONS": True,
        },
        "KEY_PREFIX": "financeapp",
    }

    # Use the environment variables directly (they're already set in .env)
    CELERY_BROKER_URL = os.environ.get("CELERY_BROKER_URL", "memory://")
    CELERY_RESULT_BACKEND = os.environ.get("CELERY_RESULT_BACKEND", "cache+memory://")

else:
    # Fallback for local development
    CELERY_BROKER_URL = "memory://"
    CELERY_RESULT_BACKEND = "cache+memory://"

# Session settings - MOVE THIS AFTER CACHE CONFIGURATION
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"


# Disable Redis during migrations
if "migrate" in sys.argv or "makemigrations" in sys.argv:
    CACHES["default"] = {"BACKEND": "django.core.cache.backends.dummy.DummyCache"}
    SESSION_ENGINE = "django.contrib.sessions.backends.db"

# Test settings - MUST COME AFTER ALL OTHER CONFIGURATIONS
if "test" in sys.argv:
    DATABASES["default"] = {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": ":memory:",
    }
    PASSWORD_HASHERS = [
        "django.contrib.auth.hashers.MD5PasswordHasher",
    ]

    # OVERRIDE Redis config for tests - use local memory cache
    CACHES["default"] = {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "test-cache",
    }

    # Use database sessions for tests
    SESSION_ENGINE = "django.contrib.sessions.backends.db"

    # Disable Celery during tests
    CELERY_BROKER_URL = "memory://"
    CELERY_RESULT_BACKEND = "cache+memory://"


# Messages framework
MESSAGE_TAGS = {
    messages.DEBUG: "alert-secondary",
    messages.INFO: "alert-info",
    messages.SUCCESS: "alert-success",
    messages.WARNING: "alert-warning",
    messages.ERROR: "alert-danger",
}

# Custom app settings
APP_SETTINGS = {
    "site_name": "WealthyWise",
    "currency": "NGN",
    "default_theme": "dark",
    "enable_notifications": True,
    "enable_auto_categorize": True,
    "enable_two_factor": False,
    "enable_email_alerts": True,
}

LOGIN_URL = "login/"
LOGIN_REDIRECT_URL = "dashboard/"
LOGOUT_REDIRECT_URL = "login/"


# File upload settings
DATA_UPLOAD_MAX_MEMORY_SIZE = 10485760
FILE_UPLOAD_MAX_MEMORY_SIZE = 10485760
FILE_UPLOAD_PERMISSIONS = 0o644
FILE_UPLOAD_DIRECTORY_PERMISSIONS = 0o755

# DeepL translation
# DEEPL_AUTH_KEY = os.getenv("DEEPL_AUTH_KEY")

# Whitenoise configuration
WHITENOISE_MAX_AGE = 31536000
WHITENOISE_USE_FINDERS = True
WHITENOISE_MANIFEST_STRICT = False

# Add connection pooling for production database
if not DEBUG and "DATABASE_URL" in os.environ:
    DATABASES["default"]["CONN_MAX_AGE"] = 600


# Optional: Sentry integration - SHOULD BE LAST
if not DEBUG and os.environ.get("SENTRY_DSN"):
    try:
        import sentry_sdk
        from sentry_sdk.integrations.django import DjangoIntegration
        from sentry_sdk.integrations.redis import RedisIntegration

        sentry_sdk.init(
            dsn=os.environ.get("SENTRY_DSN"),
            integrations=[
                DjangoIntegration(),
                RedisIntegration(),  # Add Redis integration
            ],
            traces_sample_rate=0.1,
            send_default_pii=False,
            environment="production" if os.environ.get("RENDER") else "development",
        )
    except ImportError:
        pass
